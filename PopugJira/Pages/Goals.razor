@page "/goals"
@using PopugJira.Domain
@using PopugJira.Components
@using PopugJira.Services

<h3>Goals here</h3>

@if (currentUserIdentity.User is null)
{
    <p>Please authorize to view this page</p>
}
else
{
    <div class="d-sm-block">
        <ul>
            @foreach (var goal in goals)
            {
                <li>
                    <a href="" @onclick="@(() => OpenEditGoalDialogForEdit(goal.Id))" @onclick:preventDefault>
                        @if (goal.HasAssignee)
                        {
                            @:#@goal.Id - @goal.Title - @goal.Assignee.UserName
                        }
                        else
                        {
                            @:#@goal.Id - @goal.Title
                        }
                    </a>
                    <button class="btn btn-secondary btn-sm" @onclick="@(() => RemoveGoal(goal.Id))">X</button>
                </li>
            }
        </ul>

        @if (currentUserIdentity.User.Role == Role.Admin
             || currentUserIdentity.User.Role == Role.Manager)
        {
            <button class="btn btn-primary" @onclick="@(OpenEditGoalDialogForCreation)">Add new goal</button>
            <button class="btn btn-primary" @onclick="@(ReassignGoals)">Reassign</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="@(OpenEditGoalDialogForCreation)">Add new goal</button>
        }
    </div>
}

@inject IModalService Modal
@inject IHttpClientFactory HttpClientFactory
@inject CurrentUserIdentity currentUserIdentity

@code {
    private HttpClient http;
    private List<Goal> goals = new ();

    protected override async Task OnInitializedAsync()
    {
        http = HttpClientFactory.CreateClient("goal_tracker");
        await RefreshGoalsList();
        Console.WriteLine("Initialized");
    }

    private async Task OpenEditGoalDialogForCreation()
    {
        var parameters = new ModalParameters();
        await HandleEditGoalDialog("Create Goal", parameters);
    }

    private async Task OpenEditGoalDialogForEdit(Guid goalId)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditGoalModalDialog.GoalId), goalId);
        await HandleEditGoalDialog("Edit Goal", parameters);
    }

    private async Task HandleEditGoalDialog(string title, ModalParameters parameters)
    {
        var modal = Modal.Show<EditGoalModalDialog>(title, parameters);
        var result = await modal.Result;
        if (!result.Cancelled)
        {
            await RefreshGoalsList();
        }
    }

    private async Task RemoveGoal(Guid id)
    {
        await http.DeleteAsync($"/api/v1/goals/{id}");
        await RefreshGoalsList();
        Console.WriteLine($"Deleted {id}");
    }

    private async Task ReassignGoals()
    {
        await http.PostAsync("api/v1/assignees/reassign", new StringContent(string.Empty));
        await RefreshGoalsList();
    }

    private async Task RefreshGoalsList()
    {
        var goals = await http.GetFromJsonAsync<Goal[]>("/api/v1/goals");
        if (goals != null)
        {
            this.goals = goals.ToList();
        }
    }
}